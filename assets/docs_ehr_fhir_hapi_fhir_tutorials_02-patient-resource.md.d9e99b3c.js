import{_ as s,o as a,c as e,Q as n}from"./chunks/framework.f9076d03.js";const p=JSON.parse('{"title":"FHIR Patient Resource","description":"","frontmatter":{},"headers":[],"relativePath":"docs/ehr/fhir/hapi_fhir/tutorials/02-patient-resource.md","filePath":"docs/ehr/fhir/hapi_fhir/tutorials/02-patient-resource.md","lastUpdated":1697428736000}'),l={name:"docs/ehr/fhir/hapi_fhir/tutorials/02-patient-resource.md"},o=[n('<h1 id="fhir-patient-resource" tabindex="-1">FHIR Patient Resource <a class="header-anchor" href="#fhir-patient-resource" aria-label="Permalink to &quot;FHIR Patient Resource&quot;">​</a></h1><ul><li><p>Tutorial code on GitHub <a href="https://github.com/Copper3D-brids/hapi-py-fhir-tutorials/blob/main/patientOperator.py" target="_blank" rel="noreferrer">hapi-py-fhir-tutorials -- patientOpeartor.py</a>.</p></li><li><p>Currently, it is a <strong>private</strong> repository, will open source later...</p></li></ul><h2 id="background" tabindex="-1">Background <a class="header-anchor" href="#background" aria-label="Permalink to &quot;Background&quot;">​</a></h2><p>Meet John Thompson. He is a 36 year old (date of birth is 08-02-1982) man from <code>Philadelphia</code>. He is thinking of visiting our clinical center because of some health problems. John calls our center and asks if he can visit us.</p><p>Let&#39;s check if he has visited our center before.</p><h2 id="setup-environment" tabindex="-1">Setup environment <a class="header-anchor" href="#setup-environment" aria-label="Permalink to &quot;Setup environment&quot;">​</a></h2><ul><li>Prepare docker hapi fhir server image from <code>[docker hub](https://hub.docker.com/r/hapiproject/hapi)</code> or from <a href="https://github.com/hapifhir/hapi-fhir-jpaserver-starter" target="_blank" rel="noreferrer">GitHub</a> &amp; run hapi fhir server via <code>docker-compose up</code>.</li><li>Clone the tutorial repo.</li></ul><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">clone</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">https://github.com/Copper3D-brids/hapi-py-fhir-tutorials.git</span></span>\n<span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hapi-py-fhir-tutorials</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">clone</span><span style="color:#24292E;"> </span><span style="color:#032F62;">https://github.com/Copper3D-brids/hapi-py-fhir-tutorials.git</span></span>\n<span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hapi-py-fhir-tutorials</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>Prepare python 3.9+ environment, if you are using <code>conda</code>, others same.</li></ul><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">conda</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">create</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--name</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hapi-fhirpy</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">python=</span><span style="color:#79B8FF;">3.9</span></span>\n<span class="line"><span style="color:#B392F0;">conda</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">activate</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hapi-fhirpy</span></span>\n<span class="line"><span style="color:#B392F0;">pip</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">fhirpy</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">conda</span><span style="color:#24292E;"> </span><span style="color:#032F62;">create</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hapi-fhirpy</span><span style="color:#24292E;"> </span><span style="color:#032F62;">python=</span><span style="color:#005CC5;">3.9</span></span>\n<span class="line"><span style="color:#6F42C1;">conda</span><span style="color:#24292E;"> </span><span style="color:#032F62;">activate</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hapi-fhirpy</span></span>\n<span class="line"><span style="color:#6F42C1;">pip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">fhirpy</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>Config the <code>Hapi-fhirpy env</code> in <code>prcharm settings</code> or run below code to start</li></ul><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">python</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">main.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">python</span><span style="color:#24292E;"> </span><span style="color:#032F62;">main.py</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="import-libraries" tabindex="-1">Import libraries <a class="header-anchor" href="#import-libraries" aria-label="Permalink to &quot;Import libraries&quot;">​</a></h3><p>For the beginning we should import libraries <code>fhirpy</code> and <code>os</code>.</p><p>Also We use our customise <code>pprint</code> to dhisplay some resource&#39;s structures.</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> os</span></span>\n<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> fhirpy </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> AsyncFHIRClient</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pprint</span><span style="color:#E1E4E8;">(d):</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> json </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> dump</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> sys</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    dump(d, sys.stdout, </span><span style="color:#FFAB70;">indent</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> os</span></span>\n<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> fhirpy </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> AsyncFHIRClient</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pprint</span><span style="color:#24292E;">(d):</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> json </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> dump</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> sys</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    dump(d, sys.stdout, </span><span style="color:#E36209;">indent</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="create-an-instance-of-connection" tabindex="-1">Create an instance of connection <a class="header-anchor" href="#create-an-instance-of-connection" aria-label="Permalink to &quot;Create an instance of connection&quot;">​</a></h3><ul><li>Before this task, the T-01 initial FHIR data should be completed.</li><li>To load data from FHIR server we should initate <code>FHIRClient</code> class from <code>fhirpy</code> package.</li><li>We pass <code>url</code> and <code>authorization</code> arguments from environment.</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">client </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AsyncFHIRClient(</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">url</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;http://localhost:8080/fhir/&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">authorization</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;Bearer TOKEN&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">client </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AsyncFHIRClient(</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">url</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;http://localhost:8080/fhir/&#39;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">authorization</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;Bearer TOKEN&#39;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Now, we are able to operate with FHIR resources using <code>client</code>.</p><h2 id="load-resources-data-from-hapi-fhir-server" tabindex="-1">Load resources&#39; data from HAPI FHIR server <a class="header-anchor" href="#load-resources-data-from-hapi-fhir-server" aria-label="Permalink to &quot;Load resources&#39; data from HAPI FHIR server&quot;">​</a></h2><h3 id="load-list-of-patients" tabindex="-1">Load list of patients <a class="header-anchor" href="#load-list-of-patients" aria-label="Permalink to &quot;Load list of patients&quot;">​</a></h3><p>The <code>Patient</code> resource covers data about patients and animals involved in a wide range of health-related activities, including:</p><ul><li>Theurapeutic activities</li><li>Psychiatric care</li><li>Social services</li><li>Pregnancy care</li><li>Nursing and assisted living</li><li>Dietary services</li><li>Tracking of personal health and exercise data</li></ul><p>The data in the Resource cover the &quot;who&quot; information about the patient: its attributes are focused on the demographic information necessary to support the administrative, finacial and logistic procedures. A <code>Patient</code> record is generally created and maintained by each organization providing care for a patient.</p><p>Let&#39;s try to fetch all patients in the database using <code>resources</code> method.</p><p>This method returns a <code>lazy object</code> (an instance of <code>FHIRSearchSet</code>), which provides some helpful methods for building queries. The most important method which we are going to use is <code>fetch()</code>. Using it, we can execute built queries and load all records suitable for our query.</p><ul><li><code>async .fetch()</code>: makes query to the server and returns a list of <code>Resource</code> filtered by resource type.</li><li><code>async .fetch_all()</code>: makes query to the server and returns a full list of <code>Resource</code> filtered by resource type. (not recommand)</li><li><code>async .fetch_raw()</code>: makse query to the server and returns a raw Boundle <code>Resource</code>.</li><li>More <code>FHIRSearchSet</code> api details visit <a href="https://github.com/beda-software/fhir-py#asyncfhirsearchset" target="_blank" rel="noreferrer">fhirpy GitHub</a>.</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">patients </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.resources(</span><span style="color:#9ECBFF;">&quot;Patient&quot;</span><span style="color:#E1E4E8;">).fetch()</span></span>\n<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(patients))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">patients </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.resources(</span><span style="color:#032F62;">&quot;Patient&quot;</span><span style="color:#24292E;">).fetch()</span></span>\n<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(patients))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>We built a simple query without any filters and sortings. Executing this query we load all patient records which are represented as dict-like object (an instance of <code>FHIRResource</code>).</p><p>As we can see we&#39;ve already get all patients output above, all patients are in a list. As for each patients, to get more details, we can get some fields using <code>get()</code> and <code>get_by_path()</code> methods.</p><p><code>get(field_name)</code> method receives field name as the first argument. <code>get_by_path(path)</code> method receives path as string (<code>name.0.given.0</code>) or as a list (<code>[&#39;name&#39;, 0, &#39;given&#39;, 0]</code>)</p><p>Let&#39;s try to iterate over <code>patients</code> list and display their ids and full name.</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> patient </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> patients:</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">{0}</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">{1}</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">{2}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">.format(</span></span>\n<span class="line"><span style="color:#E1E4E8;">    patient.get(</span><span style="color:#9ECBFF;">&#39;id&#39;</span><span style="color:#E1E4E8;">),</span></span>\n<span class="line"><span style="color:#E1E4E8;">    patient.get_by_path(</span><span style="color:#9ECBFF;">&#39;name.0.family&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    patient.get_by_path(</span><span style="color:#9ECBFF;">&#39;name.0.given.0&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">  ))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> patient </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> patients:</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">{0}</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">{1}</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">{2}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.format(</span></span>\n<span class="line"><span style="color:#24292E;">    patient.get(</span><span style="color:#032F62;">&#39;id&#39;</span><span style="color:#24292E;">),</span></span>\n<span class="line"><span style="color:#24292E;">    patient.get_by_path(</span><span style="color:#032F62;">&#39;name.0.family&#39;</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">    patient.get_by_path(</span><span style="color:#032F62;">&#39;name.0.given.0&#39;</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">  ))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="sorting-results" tabindex="-1">Sorting results <a class="header-anchor" href="#sorting-results" aria-label="Permalink to &quot;Sorting results&quot;">​</a></h3><p>Also, we can sort the result, for example, by name using <code>sort</code> method.</p><p>Please, pay attention, that <code>sort</code> receives multiple parameters and all possible parameters described in the <a href="http://hl7.org/fhir/R4/patient.html#search" target="_blank" rel="noreferrer">official FHIR specification</a>.</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">patients </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.resources(</span><span style="color:#9ECBFF;">&#39;Patient&#39;</span><span style="color:#E1E4E8;">).sort(</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">).fetch()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">patients </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.resources(</span><span style="color:#032F62;">&#39;Patient&#39;</span><span style="color:#24292E;">).sort(</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">).fetch()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>As we can see, the list is very long and it may be too difficult to find the paticular patient especially if we have thousands of entires.</p><p>To minimize the result, FHIR API provides special search tools.</p><h3 id="search-through-patients-resources" tabindex="-1">Search through patients&#39; resources <a class="header-anchor" href="#search-through-patients-resources" aria-label="Permalink to &quot;Search through patients&#39; resources&quot;">​</a></h3><p>The <code>Patient</code> resource has many search parameters. Yopu can read more about them in the <a href="http://hl7.org/fhir/R4/patient.html#search" target="_blank" rel="noreferrer">official FHIR specification</a>.</p><p>For searching we should use <code>search()</code> method on a search set. If we wnat to find, for example, all patients with the first name <code>Jhon</code> and the last name <code>Thompson</code> we should use intersection search, passing list of values, for example, <code>search(name=[&#39;John&#39;, &#39;Thompson&#39;])</code>. This is known as an <strong>AND</strong> search parameter. If we wanted to find all patients with name <code>John</code> or <code>Carl</code>, we would use <code>search(name=&#39;John,Carl&#39;)</code>. This is known as an <strong>OR</strong> search parameter.</p><p>Let&#39;s try to search for a patient by a parameter <code>name</code>.</p><p>This param is used for searching by string fields in the patient&#39;s name, including family, given, prefix, suffix, and/or text.</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">patients </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.resources(</span><span style="color:#9ECBFF;">&#39;Patient&#39;</span><span style="color:#E1E4E8;">).search(</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;John&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Thompson&#39;</span><span style="color:#E1E4E8;">]).fetch_all()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">patients </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.resources(</span><span style="color:#032F62;">&#39;Patient&#39;</span><span style="color:#24292E;">).search(</span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&#39;John&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Thompson&#39;</span><span style="color:#24292E;">]).fetch_all()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>We found nothing. Maybe his record has a type in the name. Now let&#39;s try to search by other parameters, for example, by brith date. The search parameter has name <code>brithdate</code> according to the <a href="http://hl7.org/fhir/R4/patient.html#search" target="_blank" rel="noreferrer">FHIR specification</a></p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">patients </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.resources(</span><span style="color:#9ECBFF;">&#39;Patient&#39;</span><span style="color:#E1E4E8;">).search(</span><span style="color:#FFAB70;">birthdate</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;1982-08-02&#39;</span><span style="color:#E1E4E8;">).fetch_all()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">patients </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.resources(</span><span style="color:#032F62;">&#39;Patient&#39;</span><span style="color:#24292E;">).search(</span><span style="color:#E36209;">birthdate</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;1982-08-02&#39;</span><span style="color:#24292E;">).fetch_all()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Also, we can try to find all patients who wre born in <code>Philadelphia</code>. For this purpose we should use <code>address</code> search param.</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">patients </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.resources(</span><span style="color:#9ECBFF;">&#39;Patient&#39;</span><span style="color:#E1E4E8;">).search(address</span><span style="color:#F97583;">-</span><span style="color:#9ECBFF;">&#39;Philadelphia&#39;</span><span style="color:#E1E4E8;">).fetch_all()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">patients </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.resources(</span><span style="color:#032F62;">&#39;Patient&#39;</span><span style="color:#24292E;">).search(address</span><span style="color:#D73A49;">-</span><span style="color:#032F62;">&#39;Philadelphia&#39;</span><span style="color:#24292E;">).fetch_all()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>However, we didn&#39;t find our client in the FHIR server system. Thus, we can create a record for him. But before we do that, let&#39;s learn more about how different fields should be stored.</p><h2 id="patient-resource-structure" tabindex="-1">Patient resource structure <a class="header-anchor" href="#patient-resource-structure" aria-label="Permalink to &quot;Patient resource structure&quot;">​</a></h2><p>Let&#39;s try to load one patient resource and understand this stucture.</p><p>We don&#39;t need to load all patient&#39;s records because they have a similar structure, so we can load only one record using <code>first</code> method on the search set.</p><p>This method returns only one resource representation (an instance of <code>FHIRResource</code>).</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">patient </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.resources(</span><span style="color:#9ECBFF;">&#39;Patient&#39;</span><span style="color:#E1E4E8;">).first()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">patient </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.resources(</span><span style="color:#032F62;">&#39;Patient&#39;</span><span style="color:#24292E;">).first()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>As you know, FHIRResource is a dict-like object. It means, we can display some fields from the resource using an access by key.</p><div class="language-py vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">patient[</span><span style="color:#9ECBFF;">&#39;id&#39;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">patient[</span><span style="color:#032F62;">&#39;id&#39;</span><span style="color:#24292E;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Let&#39;s see how the patient name looks.</p><h3 id="name" tabindex="-1">Name <a class="header-anchor" href="#name" aria-label="Permalink to &quot;Name&quot;">​</a></h3><p>The name is represented using <code>HumanName</code> type.</p><p>Names might be changed and people may have different names in different contexts. So, a patient name is always represented as a list even if the patient has only one name.</p><p>The most popular fields in the structure are:</p><ul><li>given - given names, not only first name (e.g., John). It should ne a list of names, even if the person has only one.</li><li>family - family name (e.g., Tompson).</li><li>use - in which context this name applies.</li><li>text - text representation of the full name (e.g., John Tompson).</li></ul><p>More information you can find more information in the <a href="https://www.hl7.org/fhir/datatypes.html#humanname" target="_blank" rel="noreferrer">FHIR HumanName specification</a>.</p><div class="language-py vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pprint(patient[</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pprint(patient[</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="address" tabindex="-1">Address <a class="header-anchor" href="#address" aria-label="Permalink to &quot;Address&quot;">​</a></h3><p>The address type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery. There are a varity of address formats defined around the world.</p><p>More information you can find more information in the <a href="https://www.hl7.org/fhir/datatypes.html#address" target="_blank" rel="noreferrer">FHIR Address specification</a>.</p><div class="language-py vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pprint(patient[</span><span style="color:#9ECBFF;">&#39;address&#39;</span><span style="color:#E1E4E8;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pprint(patient[</span><span style="color:#032F62;">&#39;address&#39;</span><span style="color:#24292E;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="contect-information" tabindex="-1">Contect information <a class="header-anchor" href="#contect-information" aria-label="Permalink to &quot;Contect information&quot;">​</a></h3><p>Contact information is stored in <code>telecom</code> field. This fields contains details for all kinds of technology-mediated contact points for a person, including telephone, email, etc.</p><div class="language-py vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pprint(patient[</span><span style="color:#9ECBFF;">&#39;telecom&#39;</span><span style="color:#E1E4E8;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pprint(patient[</span><span style="color:#032F62;">&#39;telecom&#39;</span><span style="color:#24292E;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="editing-patient-resource" tabindex="-1">Editing patient resource <a class="header-anchor" href="#editing-patient-resource" aria-label="Permalink to &quot;Editing patient resource&quot;">​</a></h2><p>The <code>Patient</code> resource can include different fields, which are described in the <a href="http://hl7.org/fhir/R4/patient.html#resource" target="_blank" rel="noreferrer">official FHIR specification</a>. Now we are familiar with some of them: <code>name</code>, <code>address</code>, and <code>telecom</code>. Let&#39;s create a new record for the patient.</p><h3 id="create-a-new-patient-record" tabindex="-1">Create a new patient record <a class="header-anchor" href="#create-a-new-patient-record" aria-label="Permalink to &quot;Create a new patient record&quot;">​</a></h3><p>We can create a new instance of resource using <code>resource</code> method. This method creates a new resource representation in the memory.</p><div class="language-py vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">patient </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.resource(</span><span style="color:#9ECBFF;">&#39;Patient&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">patient </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.resource(</span><span style="color:#032F62;">&#39;Patient&#39;</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>This line doesn&#39;t save the patient to the database. So, we can change any attributes of resource before it will be really saved.</p><div class="language-py vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">patient[</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>\n<span class="line"><span style="color:#E1E4E8;">  {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;given&#39;</span><span style="color:#E1E4E8;">:[</span><span style="color:#9ECBFF;">&#39;John&#39;</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;family&#39;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&#39;Thompson&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;use&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;official&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;prefix&#39;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&#39;Mr.&#39;</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">patient[</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>\n<span class="line"><span style="color:#24292E;">  {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;given&#39;</span><span style="color:#24292E;">:[</span><span style="color:#032F62;">&#39;John&#39;</span><span style="color:#24292E;">],</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;family&#39;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&#39;Thompson&#39;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;use&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;official&#39;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;prefix&#39;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&#39;Mr.&#39;</span><span style="color:#24292E;">],</span></span>\n<span class="line"><span style="color:#24292E;">  }</span></span>\n<span class="line"><span style="color:#24292E;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Also we can specify date of birth, using <code>birthDate</code> field. We should pass a date in format <code>year-month-day</code> (<code>yyyy-mm-dd</code>).</p><div class="language-py vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">patient[</span><span style="color:#9ECBFF;">&#39;brithDate&#39;</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;1985-09-01&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">patient[</span><span style="color:#032F62;">&#39;brithDate&#39;</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;1985-09-01&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>To save the resource, we should use <code>save</code> method.</p><div class="language-py vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> patient.save()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> patient.save()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>This line doesn&#39;t return anything in case of success but mutates the patient resource. Now, the <code>patient</code> has an additional <strong>meta information</strong> and <strong>unique ID</strong>. We can look at this information using attributes <code>id</code> and <code>meta</code>.</p><div class="language-py vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">patient[</span><span style="color:#9ECBFF;">&#39;id&#39;</span><span style="color:#E1E4E8;">]</span></span>\n<span class="line"><span style="color:#E1E4E8;">patient[</span><span style="color:#9ECBFF;">&#39;meta&#39;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">patient[</span><span style="color:#032F62;">&#39;id&#39;</span><span style="color:#24292E;">]</span></span>\n<span class="line"><span style="color:#24292E;">patient[</span><span style="color:#032F62;">&#39;meta&#39;</span><span style="color:#24292E;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="edit-a-patient-record" tabindex="-1">Edit a patient record <a class="header-anchor" href="#edit-a-patient-record" aria-label="Permalink to &quot;Edit a patient record&quot;">​</a></h3><p>Finally, we should update the patient&#39;s details.</p><p>Let&#39;s edit the address: the new one is <code>1818 Market St, apartment 100, Philadelphia, PA 19103</code>.</p><p>The <code>Address</code> format is on <a href="https://www.hl7.org/fhir/datatypes.html#address" target="_blank" rel="noreferrer">FHIR Address specification</a>.</p><div class="language-py vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">patient[</span><span style="color:#9ECBFF;">&#39;address&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>\n<span class="line"><span style="color:#E1E4E8;">  {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;line&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;1818 Market St, apartment 100&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;city&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Philadelphia&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;postalCode&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;19103&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;country&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;3166-2&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;use&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;home&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;physical&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">patient[</span><span style="color:#032F62;">&#39;address&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>\n<span class="line"><span style="color:#24292E;">  {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;line&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;1818 Market St, apartment 100&quot;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;city&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Philadelphia&quot;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;postalCode&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;19103&quot;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;country&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;3166-2&quot;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;use&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;home&quot;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;physical&quot;</span></span>\n<span class="line"><span style="color:#24292E;">  }</span></span>\n<span class="line"><span style="color:#24292E;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>And set the new telephone number: (215) 352-3801. Look the <a href="http://hl7.org/fhir/R4/datatypes.html#ContactPoint" target="_blank" rel="noreferrer">FHIR Telephone specification</a></p><div class="language-py vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">patient[</span><span style="color:#9ECBFF;">&#39;telecom&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>\n<span class="line"><span style="color:#E1E4E8;">  {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;system&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;phone&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;value&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;(215) 352-3801&quot;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;use&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;work&quot;</span></span>\n<span class="line"><span style="color:#E1E4E8;">  }</span></span>\n<span class="line"><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">patient[</span><span style="color:#032F62;">&#39;telecom&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>\n<span class="line"><span style="color:#24292E;">  {</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;system&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;phone&quot;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;value&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;(215) 352-3801&quot;</span><span style="color:#24292E;">,</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;use&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;work&quot;</span></span>\n<span class="line"><span style="color:#24292E;">  }</span></span>\n<span class="line"><span style="color:#24292E;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>And finally, save the changes to the HAPI FHIR server database.</p><div class="language-py vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> patient.save()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> patient.save()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="search-check-laboratory-results" tabindex="-1">Search &amp; Check laboratory results <a class="header-anchor" href="#search-check-laboratory-results" aria-label="Permalink to &quot;Search &amp; Check laboratory results&quot;">​</a></h3><p>Now, we need to make sure that we have our patient record in the database.</p><p>Let&#39;s try to search for the patient again. For this operation we should use the same query as we did it before.</p><div class="language-py vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">patients </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.resources(</span><span style="color:#9ECBFF;">&#39;Patient&#39;</span><span style="color:#E1E4E8;">).search(</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;John&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Thompson&#39;</span><span style="color:#E1E4E8;">]).fetch_all()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">pprint(patients)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">patients </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.resources(</span><span style="color:#032F62;">&#39;Patient&#39;</span><span style="color:#24292E;">).search(</span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&#39;John&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Thompson&#39;</span><span style="color:#24292E;">]).fetch_all()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">pprint(patients)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>If you followed the instructions, you should have the following fields in the output:</p><ul><li>id</li><li>resourceType</li><li>birthDate</li><li>name</li><li>telecom</li><li>address</li></ul><h3 id="delete-resource" tabindex="-1">Delete resource <a class="header-anchor" href="#delete-resource" aria-label="Permalink to &quot;Delete resource&quot;">​</a></h3><p>Now, we&#39;ve already checked the new Patient resource exsited in our database.</p><p>But, what if we create a wrong Patient resource and how to delete it?</p><p>Let&#39;s try to delete a non-relational Patient resource (without other resources&#39; references).</p><p><strong>Note:</strong> If the delete method success, it doesn&#39;t return anything, but the resource will be deleted from database.</p><div class="language-py vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">patientResourceSearchSet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.resources(</span><span style="color:#9ECBFF;">&#39;Patient&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">patients </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> patientResourceSearchSet.search(</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;John&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Thompson&#39;</span><span style="color:#E1E4E8;">]).fetch_all()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> patient </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> patients:</span></span>\n<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> patient.delete()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">patientResourceSearchSet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.resources(</span><span style="color:#032F62;">&#39;Patient&#39;</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#24292E;">patients </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> patientResourceSearchSet.search(</span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&#39;John&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Thompson&#39;</span><span style="color:#24292E;">]).fetch_all()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> patient </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> patients:</span></span>\n<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> patient.delete()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Finally, the Patient resource be deleted in the database.</p><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h2><p>From this laboratory work we learned how to:</p><ul><li>load patients from the HAPI FHIR server.</li><li>search by different fields.</li><li>sort the results.</li><li>display different resource&#39;s attributes.</li><li>create patient record.</li><li>edit patient record.</li><li>delete a non-relational resource.</li></ul>',111)];const t=s(l,[["render",function(s,n,p,l,t,r){return a(),e("div",null,o)}]]);export{p as __pageData,t as default};
